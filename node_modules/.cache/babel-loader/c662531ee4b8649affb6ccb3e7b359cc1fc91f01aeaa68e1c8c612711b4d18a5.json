{"ast":null,"code":"var _jsxFileName = \"A:\\\\WebstormProjects\\\\DentaView-Die4\\\\src\\\\ThreeDModel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeDModel = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Szene, Kamera und Renderer erstellen\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 6); // Setze die Kamera weiter weg, sodass das Modell sichtbar ist\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(renderer.domElement);\n    renderer.setClearColor(0x0000ff); // blaue als Hintergrundfarbe\n\n    // OrbitControls hinzuf端gen\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true; // Sanfte Bewegung\n    controls.dampingFactor = 0.05;\n    controls.minDistance = 3; // Minimaler Zoom-Abstand (Modell bleibt immer sichtbar)\n    controls.maxDistance = 10; // Maximale Zoom-Distanz\n    controls.target.set(0, 0, 0); // Fokus auf die Mitte des Modells\n    controls.update();\n\n    // Licht hinzuf端gen\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1); // Umgebungslicht\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 10);\n    scene.add(directionalLight);\n\n    // GLTFLoader verwenden, um ein 3D-Modell zu laden\n    const loader = new GLTFLoader();\n    loader.load('/chemicals_opaque_test_v2.1.glb',\n    // Pfad zu deinem 3D-Modell\n    gltf => {\n      const model = gltf.scene;\n      model.scale.set(5, 5, 5); // Modell skalieren\n      model.position.set(0, -2, 0); // Position des Modells\n      scene.add(model);\n    }, xhr => {\n      console.log(xhr.loaded / xhr.total * 100 + '% geladen');\n    }, error => {\n      console.error('Fehler beim Laden des 3D-Modells', error);\n    });\n\n    // Animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // OrbitControls aktualisieren\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup bei unmount\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeDModel, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeDModel;\nexport default ThreeDModel;\nvar _c;\n$RefreshReg$(_c, \"ThreeDModel\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","OrbitControls","jsxDEV","_jsxDEV","ThreeDModel","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","setClearColor","controls","enableDamping","dampingFactor","minDistance","maxDistance","target","update","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","loader","load","gltf","model","scale","xhr","console","log","loaded","total","error","animate","requestAnimationFrame","render","removeChild","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["A:/WebstormProjects/DentaView-Die4/src/ThreeDModel.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst ThreeDModel = () => {\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Szene, Kamera und Renderer erstellen\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n        camera.position.set(0, 0, 6); // Setze die Kamera weiter weg, sodass das Modell sichtbar ist\r\n\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        mountRef.current.appendChild(renderer.domElement);\r\n        renderer.setClearColor(0x0000ff); // blaue als Hintergrundfarbe\r\n\r\n        // OrbitControls hinzuf端gen\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true; // Sanfte Bewegung\r\n        controls.dampingFactor = 0.05;\r\n        controls.minDistance = 3; // Minimaler Zoom-Abstand (Modell bleibt immer sichtbar)\r\n        controls.maxDistance = 10; // Maximale Zoom-Distanz\r\n        controls.target.set(0, 0, 0); // Fokus auf die Mitte des Modells\r\n        controls.update();\r\n\r\n        // Licht hinzuf端gen\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 1); // Umgebungslicht\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n        directionalLight.position.set(10, 10, 10);\r\n        scene.add(directionalLight);\r\n\r\n        // GLTFLoader verwenden, um ein 3D-Modell zu laden\r\n        const loader = new GLTFLoader();\r\n        loader.load(\r\n            '/chemicals_opaque_test_v2.1.glb', // Pfad zu deinem 3D-Modell\r\n            (gltf) => {\r\n                const model = gltf.scene;\r\n                model.scale.set(5, 5, 5); // Modell skalieren\r\n                model.position.set(0, -2, 0); // Position des Modells\r\n                scene.add(model);\r\n            },\r\n            (xhr) => {\r\n                console.log((xhr.loaded / xhr.total) * 100 + '% geladen');\r\n            },\r\n            (error) => {\r\n                console.error('Fehler beim Laden des 3D-Modells', error);\r\n            }\r\n        );\r\n\r\n        // Animation\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update(); // OrbitControls aktualisieren\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n        // Cleanup bei unmount\r\n        return () => {\r\n            mountRef.current.removeChild(renderer.domElement);\r\n        };\r\n    }, []);\r\n\r\n    return <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />;\r\n};\r\n\r\nexport default ThreeDModel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}